---
import {
  ERROR,
  PREVIOUS_ATTEMPT_COOKIE_KEY as REDIRECT_COOKIE_KEY,
  SUBSCRIBED_USERS_KEY,
  SUBSCRIPTION_EMAIL_TEMPLATE,
  SUCCESS,
  type AlertType,
} from '../lib/constants';

let alert: { status: AlertType; message: string } | undefined = undefined;
let redirect = Astro.cookies.get(REDIRECT_COOKIE_KEY)?.boolean() ?? false;
if (Astro.request.method === 'POST') {
  if (redirect) {
    Astro.cookies.delete(REDIRECT_COOKIE_KEY);
    Astro.redirect('/');
  }
  try {
    const kv = Astro.locals.runtime.env.NEWS_LETTER_KV;
    const data = await Astro.request.formData();
    const email = data.get('email') as string;
    const currentEmails = JSON.parse(
      (await kv.get(SUBSCRIBED_USERS_KEY)) ?? '[]',
    ) as string[];
    if (currentEmails.includes(email)) {
      const emailSubscriptionTriesKey = `${email}-tries`;
      const numberOfTimesSubscribed = JSON.parse(
        (await kv.get(emailSubscriptionTriesKey)) ?? '1',
      ) as number;
      const baseMessage = 'You are already subscribed.';
      alert = {
        status: ERROR,
        message:
          numberOfTimesSubscribed > 4
            ? `${baseMessage} Please stop spamming us :).`
            : baseMessage,
      };
      await kv.put(
        emailSubscriptionTriesKey,
        JSON.stringify(numberOfTimesSubscribed + 1),
      );
    } else {
      currentEmails.push(email);
      await kv.put(SUBSCRIBED_USERS_KEY, JSON.stringify(currentEmails));
      const service = Astro.locals.runtime.env.EMAILER_SERVICE;
      service.fetch('/', {
        body: JSON.stringify({ email, template: SUBSCRIPTION_EMAIL_TEMPLATE }),
        headers: new Headers({ 'x-api-key': Astro.locals.runtime.env.API_KEY }),
      });
      alert = {
        status: SUCCESS,
        message:
          "You have been successfully subscribed to Tim's Experiments updates.",
      };
    }
  } catch (error) {
    alert = {
      status: ERROR,
      message: 'An unknown error occurred. Please try again later.',
    };
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const initialLoad = Astro.request.method !== 'POST';
Astro.cookies.set(REDIRECT_COOKIE_KEY, `${alert?.status === 'success'}`, {
  httpOnly: true,
  sameSite: 'lax',
});
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://fonts.googleapis.com/css2?family=Urbanist:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Tim's Experiments</title>
  </head>
  <body>
    <div class="relative flex h-screen w-screen px-6 pt-14 lg:px-8">
      <div
        class="absolute inset-x-0 -top-40 transform-gpu overflow-hidden blur-3xl sm:-top-80"
        aria-hidden="true">
        <div
          class="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-red-400 to-teal-vivid-700 opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
          style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)">
        </div>
      </div>
      <div class="mx-auto max-w-2xl py-6 sm:py-14 lg:py-20">
        <div
          class:list={[
            initialLoad
              ? 'animation scale-0 opacity-0 transition duration-700'
              : '',
            'mb-12 flex justify-center',
          ]}>
          <img
            class="h-14"
            src="/tim_s_experiments_logo_dark.svg"
            alt="Tim's Experiments"
          />
        </div>
        <div class="hidden sm:mb-8 sm:flex sm:justify-center">
          <div
            class:list={[
              initialLoad
                ? 'animation relative translate-y-20 opacity-0 transition delay-100 duration-700'
                : '',
              'rounded-full bg-grey-50/5 px-3 py-1 font-mono text-sm leading-6 text-grey-300 ring-1 ring-grey-50/20 hover:ring-grey-50/40',
            ]}>
            timothyaltemus.com is becoming Tim's Experiments.
          </div>
        </div>
        <div class="text-center">
          <h1
            class:list={[
              initialLoad
                ? 'animation trasnition translate-y-20 scale-90 opacity-0 delay-500 duration-700'
                : '',
              'text-4xl font-bold tracking-tight text-grey-50 sm:text-6xl',
            ]}>
            Get notified when we're launching.
          </h1>
          <p
            class:list={[
              initialLoad
                ? 'animation translate-y-20 opacity-0 transition delay-500 duration-700'
                : '',
              'mt-6 font-secondary text-lg leading-8 text-grey-400',
            ]}>
            Get ready to discover a digital playground where software's
            boundaries are pushed, explored, and redefined. Dive into
            professional insights, in-depth topics, practical code snippets, toy
            projects, and fresh takes on emerging tech. Interested in the type
            of projects up ahead? Take a peek at this {' '}
            <a
              class="text-teal-vivid-400 hover:text-teal-vivid-500 focus:text-teal-vivid-500 focus:underline focus-visible:outline-none"
              href="https://chat.timothyaltemus.com"
              target="_blank"
              rel="noopener noreferrer">
              chat app
            </a>
            {' '}built on Cloudflare Edge. Stay connected for more exciting
            content ahead.
          </p>
          {
            alert?.status === SUCCESS ? (
              <div
                class="animation mx-auto mb-4  mt-10 flex w-fit items-center rounded-lg bg-grey-800 p-4 text-sm text-emerald-400 opacity-0 duration-500"
                role="alert">
                <svg
                  class="mr-3 inline h-4 w-4 flex-shrink"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-thumbs-up">
                  <path d="M7 10v12" />
                  <path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z" />
                </svg>
                <span class="sr-only">Success</span>
                <div>
                  Thank you for your interest, we will notify you when we
                  launch!
                </div>
              </div>
            ) : (
              <form
                method="POST"
                class:list={[
                  initialLoad
                    ? 'animation trasnition translate-y-20 scale-75 opacity-0 delay-700 duration-700'
                    : '',
                  'mx-auto mt-10 flex max-w-md gap-x-4',
                ]}>
                <input name="previous-submission-status" type="hidden" />
                <label for="email-address" class="sr-only">
                  Email address
                </label>
                <input
                  id="email-address"
                  name="email"
                  type="email"
                  autocomplete="email"
                  required
                  class="min-w-0 flex-auto rounded-md border-0 bg-transparent px-3.5 py-2 text-grey-100 shadow-sm ring-1 ring-inset ring-grey-700 placeholder:text-grey-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-teal-vivid-600 disabled:cursor-not-allowed disabled:bg-grey-800/40 disabled:ring-grey-800 disabled:placeholder:text-grey-600 sm:text-sm sm:leading-6"
                  placeholder="Enter your email"
                />
                <button
                  class="flex-none rounded-md bg-teal-vivid-600 px-3.5 py-2.5 text-sm font-semibold text-grey-50 shadow-sm hover:bg-teal-vivid-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-vivid-600 disabled:cursor-not-allowed disabled:opacity-70 disabled:hover:bg-teal-vivid-600"
                  type="submit">
                  Notify me
                </button>
              </form>
            )
          }
        </div>
      </div>
    </div>
    {
      alert && alert.message && alert.status === ERROR && (
        <div
          id="toast-alert"
          class="animation fixed bottom-5 left-5 flex w-full max-w-xs items-center space-x-4 rounded-lg bg-grey-800 p-4 text-grey-400 opacity-0 shadow duration-500"
          role="alert">
          <div class="inline-flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-lg text-red-vivid-400 focus-within:outline-none">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-alert-circle">
              <circle cx="12" cy="12" r="10" />
              <line x1="12" x2="12" y1="8" y2="12" />
              <line x1="12" x2="12.01" y1="16" y2="16" />
            </svg>
            <span class="sr-only">Error</span>
          </div>
          <div class="text-sm font-normal">{alert.message}</div>
          <button
            type="button"
            class="-mx-1.5 -my-1.5 ml-auto inline-flex h-8 w-8 items-center justify-center rounded-lg border-l-0 bg-grey-800 p-1.5 text-grey-500 hover:bg-grey-700 hover:text-white focus:ring-2 focus:ring-grey-300"
            data-dismiss-target="#toast-alert"
            aria-label="Close">
            <span class="sr-only">Close</span>
            <svg
              class="h-3 w-3"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 14 14">
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
              />
            </svg>
          </button>
        </div>
      )
    }
  </body>

  <script src="../scripts/animate.ts"></script>
  <script src="../scripts/index.ts"></script>

  <style>
    html,
    body {
      @apply bg-grey-900 font-primary;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      @apply font-primary;
    }

    code {
      @apply font-mono;
    }
  </style>
</html>
